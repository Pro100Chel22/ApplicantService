// <auto-generated />
using System;
using AdmissioningService.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdmissioningService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdmissioningService.Core.Domain.AdmissionCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EventYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AdmissionCompanies");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.AdmissionProgram", b =>
                {
                    b.Property<Guid>("ApplicantAdmissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EducationProgramId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("ApplicantAdmissionId", "EducationProgramId");

                    b.HasIndex("EducationProgramId");

                    b.ToTable("AdmissionPrograms");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.ApplicantAdmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdmissionCompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("AdmissionStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionCompanyId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ApplicantAdmissions");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.ApplicantCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicantCaches");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.EducationDocumentTypeCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.ToTable("EducationDocumentTypeCaches");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.EducationLevelCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EducationLevelCaches");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.EducationProgramCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("boolean");

                    b.Property<string>("EducationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EducationLevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("FacultyId");

                    b.ToTable("EducationProgramCaches");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.FacultyCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FacultyCaches");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.UserCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserCaches");
                });

            modelBuilder.Entity("ApplicantCacheEducationDocumentTypeCache", b =>
                {
                    b.Property<Guid>("AddedDocumentTypesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantCacheId")
                        .HasColumnType("uuid");

                    b.HasKey("AddedDocumentTypesId", "ApplicantCacheId");

                    b.HasIndex("ApplicantCacheId");

                    b.ToTable("ApplicantCacheEducationDocumentTypeCache");
                });

            modelBuilder.Entity("EducationDocumentTypeCacheEducationLevelCache", b =>
                {
                    b.Property<Guid>("EducationDocumentTypeCacheId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NextEducationLevelId")
                        .HasColumnType("uuid");

                    b.HasKey("EducationDocumentTypeCacheId", "NextEducationLevelId");

                    b.HasIndex("NextEducationLevelId");

                    b.ToTable("EducationDocumentTypeCacheEducationLevelCache");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.AdmissionProgram", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.ApplicantAdmission", "ApplicantAdmission")
                        .WithMany()
                        .HasForeignKey("ApplicantAdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.EducationProgramCache", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantAdmission");

                    b.Navigation("EducationProgram");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.ApplicantAdmission", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.AdmissionCompany", "AdmissionCompany")
                        .WithMany()
                        .HasForeignKey("AdmissionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.ApplicantCache", "Applicant")
                        .WithMany("Admissions")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.Manager", "Manager")
                        .WithMany("ApplicantAdmissions")
                        .HasForeignKey("ManagerId");

                    b.Navigation("AdmissionCompany");

                    b.Navigation("Applicant");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.EducationDocumentTypeCache", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.EducationLevelCache", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevel");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.EducationProgramCache", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.EducationLevelCache", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.FacultyCache", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationLevel");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.Manager", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.FacultyCache", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId");

                    b.HasOne("AdmissioningService.Core.Domain.UserCache", "User")
                        .WithOne()
                        .HasForeignKey("AdmissioningService.Core.Domain.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicantCacheEducationDocumentTypeCache", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.EducationDocumentTypeCache", null)
                        .WithMany()
                        .HasForeignKey("AddedDocumentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.ApplicantCache", null)
                        .WithMany()
                        .HasForeignKey("ApplicantCacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationDocumentTypeCacheEducationLevelCache", b =>
                {
                    b.HasOne("AdmissioningService.Core.Domain.EducationDocumentTypeCache", null)
                        .WithMany()
                        .HasForeignKey("EducationDocumentTypeCacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdmissioningService.Core.Domain.EducationLevelCache", null)
                        .WithMany()
                        .HasForeignKey("NextEducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.ApplicantCache", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("AdmissioningService.Core.Domain.Manager", b =>
                {
                    b.Navigation("ApplicantAdmissions");
                });
#pragma warning restore 612, 618
        }
    }
}
